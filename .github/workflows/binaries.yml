name: Publish native binaries

on:
  workflow_dispatch:
    inputs:
      # optionally, could be set to build tag branch and do complete release (useful when real release failed)
      tag:
        description: 'Target tag (leave empty for test build)'
        required: false
        default: ''
        type: string
  release:
    types: [published]

jobs:
  selectTag:
    name: Select target tag
    runs-on: ubuntu-latest
    steps:
      - name: Select tag name
        run: |
          if [[ ${{ inputs.tag }} == true ]]; then
            tagName=${{ inputs.tag }}
          else
            tagName=${{ github.event.release.tag_name }}
          fi
          echo "TAG_NAME=$tagName" >> $GITHUB_ENV

      # different step to be sure variable is accessible
      - name: Show selection
        run: |
          echo "Selected tag: $TAG_NAME"


  build:
    name: Build ${{ matrix.artifact }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact: yaml-updater.exe
            os: windows-2022
            build: yaml-config-updater-cli/build/native/nativeCompile/yaml-config-updater-cli.exe
            experimental: true
            upx: true
          - artifact: yaml-updater-mac-amd64
            os: macos-latest
            build: yaml-config-updater-cli/build/native/nativeCompile/yaml-config-updater-cli
            # https://github.com/upx/upx/issues/612
            upx: false
          - artifact: yaml-updater-linux-amd64
            os: ubuntu-latest
            build: yaml-config-updater-cli/build/native/nativeCompile/yaml-config-updater-cli
            upx: true
            publishJar: true # all builds producing this jar

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    needs: [selectTag]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TAG_NAME }}

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'liberica'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: gradle
      - name: Verify GraalVM
        run: |
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          java --version
          native-image --version

        # cache
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build
        id: build
        shell: bash
        run: |
          if [ -n "${{ matrix.publishJar }}" ]; then
            BUILD_TARGET=":yaml-config-updater-cli:shadowJar :yaml-config-updater-cli:nativeCompile"
          else
            BUILD_TARGET=":yaml-config-updater-cli:nativeCompile"
          fi
          chmod +x gradlew
          ./gradlew ${BUILD_TARGET} --no-daemon
          ## Rename files
          mkdir upload
          cp ${{ matrix.build }} upload/${{ matrix.artifact }}
          echo "binary=upload/${{ matrix.artifact }}" >> $GITHUB_OUTPUT
          if [ -n "${{ matrix.publishJar }}" ]; then
            cp yaml-config-updater-cli/build/libs/*-all.jar upload/yaml-updater.jar
            echo "jarFile=upload/yaml-updater.jar" >> $GITHUB_OUTPUT
          fi

      - name: Run UPX
        uses: svenstaro/upx-action@v2
        if: ${{ matrix.upx }}
        continue-on-error: true
        with:
          file: ${{ steps.build.outputs.binary }}
          args: "--lzma --best"

      - name: Publish ${{ matrix.artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ steps.build.outputs.binary }}

      - name: Quick Test
        run: ./${{ steps.build.outputs.binary }} --version

      - name: Publish JAR
        uses: actions/upload-artifact@v4
        if: matrix.publishJar
        with:
          name: yaml-updater.jar
          path: ${{ steps.build.outputs.jarFile }}

  publish:
    runs-on: ubuntu-latest
    if: ${{ TAG_NAME }}
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - yaml-updater.exe
          - yaml-updater-mac-amd64
          - yaml-updater-linux-amd64
          - yaml-updater.jar
    needs: [build]
    steps:
      - run: mkdir -p tmp
      - name: Download artifact ${{ matrix.artifact }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: tmp

      - name: Upload ${{ matrix.artifact }}
        if: ${{ env.TAG_NAME }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tmp/${{ matrix.artifact }}
          tag: ${{ env.TAG_NAME }}
          overwrite: true

  dockerImage:
    strategy:
      fail-fast: false
      matrix:
        artifact: [yaml-updater-linux-amd64]

    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ TAG_NAME }}
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - run: mkdir -p tmp

      - name: Download artifact ${{ matrix.artifact }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: tmp

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true # always push - makes debugging faster/easier
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
